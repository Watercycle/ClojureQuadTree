<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1425675531800">{:repl-history {:ide [], :local [&quot;(defn setup []\n  (q/smooth)                                                ;antialiasing\n  (q/frame-rate 60)\n\n  (q/background 0)\n  (q/stroke-weight 3)\n  (q/stroke 0 0 125)\n\n  (q/text-align :right)\n  (q/fill 255)\n  (q/text-size 25)\n\n  (draw-rect-2-broken [50])\n;  (draw-rect-2-broken [50])\n\n  (comment\n    (let [quad (qt/build-quadtree [0 0 300 300] rand-dots)]\n      (qt/draw-quadtree quad))))&quot; &quot;(defn func [[x y z]]\n  (println (inc x)))&quot; &quot;(func [1 2 3])&quot; &quot;(defn draw-rect-2-broken\n  ;draws a rectangle recursively with lines (takes a vector)\n  [[x]]\n  (when (&lt; x 480)\n    (println \&quot;ran\&quot;)\n    (q/line x 0 x 480)\n    (draw-rect-2-broken (inc x))))&quot; &quot;(defn draw-rect-2-broken\n  ;draws a rectangle recursively with lines (takes a vector)\n  [[x]]\n  (when (&lt; x 480)\n    (println \&quot;ran\&quot;)\n    (draw-rect-2-broken (inc x))\n    (q/line x 0 x 480)))&quot; &quot;(println (inc x))&quot; &quot;(defn func [[x]]\n  (println (inc x)))&quot; &quot;(defn func [[x]]\n  (func (inc x)))&quot; &quot;(defn func [[x]]\n  (func [(inc x)]))&quot; &quot;(defn func [[x]]\n  (func (vec (inc x))))&quot; &quot;(defn func [[x]]\n  (if (&lt; x 5)\n    (func [(inc x)])))&quot; &quot;(func [1])&quot; &quot;(:node (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(type (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(type [(:nodes (qt/build-quadtree [0 0 300 300] rand-dots))])&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map draw-helper [(:nodes tree)])\n    (draw-out-rect (:rect tree))))&quot; &quot;(type (:rect (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(type (-&gt;&gt; :rect (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(type (-&gt; :rect (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(type (-&gt; :nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(type (-&gt; :nodes (qt/build-quadtree [0 0 300 300] rand-dots) :rect))&quot; &quot;(defn func [[x]]\n  (when (&lt; x 5)\n    (println x)\n    (func [(inc x)])))&quot; &quot;(-&gt; :nodes (qt/build-quadtree [0 0 300 300] rand-dots) :rect)&quot; &quot;(-&gt;&gt; :nodes (qt/build-quadtree [0 0 300 300] rand-dots) :rect)&quot; &quot;(-&gt; :nodes (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(-&gt;  :rect :nodes (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(-&gt; :nodes  :rect (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(-&gt; :nodes  (qt/build-quadtree [0 0 300 300] rand-dots) :rect)&quot; &quot;(-&gt; :rect :nodes  (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(:nodes  (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(:rect (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(-&gt;  :nodes  (qt/build-quadtree [0 0 300 300] rand-dots) (nth 0))&quot; &quot;(-&gt;&gt;  :nodes  (qt/build-quadtree [0 0 300 300] rand-dots) (nth 0))&quot; &quot;(-&gt; (nth 0) :nodes  (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(-&gt;  :nodes (nth 0)  (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(-&gt;  :nodes  (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;rand-dots&quot; &quot;(binding [clojure.pprint/*print-right-margin* 200]\n  (clojure.pprint/pprint (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(qt/build-quadtree [0 0 300 300] rand-dots)&quot; &quot;(:nodes (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(nth (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)) 0)&quot; &quot;(:rect (nth (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)) 0))&quot; &quot;type&quot; &quot;(type (:rect (nth (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)) 0)))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map #(draw-helper %) [(:nodes tree)])\n    (draw-out-rect [(:rect tree)])))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (draw-helper (nth (:nodes tree) 0))\n    (draw-out-rect (:rect tree))))&quot; &quot;(map inc [1 2 3])&quot; &quot;(map #(center (:rect %)) (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(map #(qt/center (:rect %)) (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(map #(qt/draw-helper (:nodes (qt/build-quadtree [0 0 300 300] rand-dots))))&quot; &quot;(map #(qt/draw-helper [(:nodes (qt/build-quadtree [0 0 300 300] rand-dots))]))&quot; &quot;(map #(qt/draw-helper (into [] (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))))&quot; &quot;(map qt/draw-helper (:rect (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;-XX:-OmitStackTraceInFastThrow&quot; &quot;(defn draw-helper [tree]\n  (do\n    (println \&quot;drawing node\&quot;)\n    (map #(if-not (nil? %) (draw-helper (:rect %))) (:nodes tree))\n    (draw-cross (:rect tree))))&quot; &quot;(map #(qt/draw-helper (:rect %)) (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;/&quot; &quot;(defn draw-helper [tree]\n  (do\n    (println \&quot;drawing node\&quot;)\n    (map #(if-not (nil? %) (draw-helper %)) (:nodes tree))\n    (draw-cross (:rect tree))))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map draw-helper (:nodes tree))\n    (draw-out-rect (:rect tree))))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map draw-helper (:nodes tree))\n    (let [x y w h] (:rect tree)\n                   (draw-out-rect x y w h))))&quot; &quot;(defn draw-helper [tree]\n  (do\n    (println (nth (:rect tree) 0))\n    (map #(if-not (nil? %) (draw-helper %)) (:nodes tree))\n    ;  (draw-cross (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map #(if-not (nil? %) (draw-helper %)) (:nodes tree))\n    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(draw-quadtree (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(defn draw-helper [tree]\n  (do\n    (println \&quot;drawing node\&quot;)\n    (map #(if-not (nil? %) (draw-helper %)) (:nodes tree))\n    (draw-cross (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map (fn [node]\n           (if-not (nil? node) (do\n                                 (draw-quadtree node)\n                                 ((draw-cross (:rect node)))))) (:nodes tree))\n;    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map #(if-not (nil? %) (do\n                             (draw-quadtree %)\n                             ((draw-cross (:rect %))))) (:nodes tree))\n;    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing tree\&quot;)\n    (map #(if-not (nil? %) (do\n                             (draw-quadtree %)\n                             (draw-cross (:rect %)))) (:nodes tree))\n;    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map #(if-not (nil? %) ((draw-helper %))) (:nodes tree))\n;    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(defn draw-quadtree [tree]\n  (do\n    (println \&quot;drawing primary tree\&quot;)\n    (map #(if-not (nil? %) (draw-helper %)) (:nodes tree))\n;    (draw-out-rect (:rect tree))\n    ))&quot; &quot;(map qt/draw-helper (:nodes (qt/build-quadtree [0 0 300 300] rand-dots)))&quot; &quot;(qt/draw-quadtree (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(qt/draw-helper (qt/build-quadtree [0 0 300 300] rand-dots))&quot; &quot;(comment\n  (map #(if-not (= 1 %) (println \&quot;good!\&quot;)) '(1 2 3 4 5 6))\n  (:nodes (qt/build-quadtree [0 0 300 300] rand-dots))\n  rand-dots\n  (map #(if-not (nil? %)\n         (println \&quot;made it\&quot;)\n         (println \&quot;didfn't make it\&quot;))\n       (:nodes (qt/build-quadtree [0 0 300 300] rand-dots))))&quot; &quot;(map (do (println \&quot;1\&quot;) (println \&quot;2\&quot;)) [1 2 3])&quot; &quot;(defn setup []\n  (q/smooth)                                                ;antialiasing\n  (q/frame-rate 60)\n\n  (q/background 0)\n  (q/stroke-weight 3)\n  (q/stroke 0 0 125)\n\n  (q/text-align :right)\n  (q/fill 255)\n  (q/text-size 25)\n\n\n  (comment)\n  (let [quad (qt/build-quadtree [0 0 300 300] rand-dots)]\n    (qt/draw-quadtree quad)))&quot; &quot;(defn setup []\n  (q/smooth)                                                ;antialiasing\n  (q/frame-rate 60)\n\n  (q/background 0)\n  (q/stroke-weight 3)\n  (q/stroke 0 0 125)\n\n  (q/text-align :right)\n  (q/fill 255)\n  (q/text-size 25)\n\n  (dr 50)\n\n  (comment)\n  (let [quad (qt/build-quadtree [0 0 300 300] rand-dots)]\n    (qt/draw-quadtree quad)))&quot; &quot;(defn dr [x]\n  (when (&lt; x 480)\n    q/line x 0 x 480))&quot; &quot;(defn dr [x]\n  (when (&lt; x 480)\n    (q/line x 0 x 480)\n    (dr (inc x))))&quot; &quot;(defn dr [[x]]\n  (when (&lt; x 480)\n    (draw-out-rect x 0 50 50)\n    (dr [(inc x)])))&quot; &quot;(defn dr [[x]]\n  (when (&lt; x 480)\n    (draw-out-rect [x 0 50 50])\n    (dr [(inc x)])))&quot; &quot;(defn dr [[x]]\n  (when (&lt; x 480)\n    (draw-out-rect [0 0 50 50])\n    (dr [(inc x)])))&quot; &quot;(defn draw-out-rect [[x y w h]]\n  (let [bt  (+ y h)\n        rt (+ x w)]\n    (q/line x y x bt)\n    (q/line x bt rt bt)\n    (q/line rt bt rt y)\n    (q/line rt y x y)))&quot; &quot;(defn dr [[x]]\n  (do\n    (println \&quot;main run\&quot;)\n    (draw-out-rect [5 5 715 475])\n    (dr-helper [(inc x)])))&quot; &quot;(dr-helper [[x]]\n  (when (&lt; x 480)\n    (println \&quot;sub run\&quot;)\n    (draw-out-rect [x x 50 50])\n    (dr-helper [(inc x)])))&quot; &quot;(defn dr-helper [[x]]\n  (when (&lt; x 480)\n    (println \&quot;sub run\&quot;)\n    (draw-out-rect [x x 50 50])\n    (dr-helper [(inc x)])))&quot; &quot;(map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1))&quot; &quot;(map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1) true)&quot; &quot;(map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1) 1)&quot; &quot;((map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1)) 1)&quot; &quot;(do (map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1)))&quot; &quot;(do (map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1)) 1)&quot; &quot;(do (map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1)) true)&quot; &quot;(do (map #(if (= 1 %) (println \&quot;works\&quot;)) '(1 2 1 3 1)) nil)&quot; &quot;(defn dr [[x]]\n  (do\n    (println \&quot;main run\&quot; x)\n    (draw-out-rect [5 5 710 470])\n    (do (map #(dr-helper [(inc %)]) [0 100 200 300]) nil)))&quot; &quot;(defn dr-helper [[x]]\n  (when (&lt; x 480)\n    (println \&quot;sub run\&quot; x)\n    (qt/draw-cross [x x 50 50])\n    (dr-helper [(inc x)])))&quot; &quot;(defn dr [[x]]\n  (do\n    (println \&quot;main run\&quot; x)\n    (draw-out-rect [5 5 710 470])\n    (map #(dr-helper [(inc %)]) [0 100 200 300])))&quot; &quot;(map '(1 2 3) 5)&quot; &quot;(map '(1 2 3) '(3 2 1))&quot; &quot;(map zero? '(3 2 1))&quot; &quot;(apply zero? '(3 2 1))&quot; &quot;(defn dr [[x]]\n  (do\n    (println \&quot;main run\&quot; x)\n    ;(draw-out-rect [5 5 710 470])\n    (map #(dr-helper [(inc %)]) [0 100 200 300])))&quot;], :remote []}}</component>
</project>