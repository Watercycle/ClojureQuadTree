<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1425024560853">{:repl-history {:ide [], :local [&quot;(defn draw []\n  (q/background 0)\n  (q/text (str \&quot;max depth: \&quot; 5) 250 22)\n;  (q/text (str \&quot;active nodes: \&quot; qt/num-nodes) 200 46)\n  (q/text (str \&quot;total objects: \&quot; num-obj) 250 70)\n  (q/text (str \&quot;obj 0 x pos: \&quot; (first objs)) 250 94))&quot; &quot;(def objs (take num-obj (repeatedly #(rand-int 10))))&quot; &quot;(def rand-dots (take num-obj (repeatedly #(rand-int 10))))&quot; &quot;(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, World!\&quot;))&quot; &quot;(deftest a-test\n  (testing \&quot;FIXME, I fail.\&quot;\n    (is (= 0 1))))&quot; &quot;(deftest a-test\n  (testing \&quot;FIXME, I fail.\&quot;\n    (is (= 1 1))))&quot; &quot;(run-tests)&quot; &quot;(quadtree.core-test/run-tests)&quot; &quot;(run-tests quadtree.core-test)&quot; &quot;(run-tests 'quadtree.core-test)&quot; &quot;(run-tests 'quadtree)&quot; &quot;(clojure.test/run-all-tests)&quot; &quot;(run-all-tests)&quot; &quot;(ns quadtree.core-test\n  (:require [clojure.test :refer :all]\n            [quadtree.core :refer :all]))&quot; &quot;(clojure-all-tests)&quot; &quot;(ns quadtree.core-test\n  (:require [clojure.test :as test]\n            [quadtree.core :refer :all]))&quot; &quot;(test/clojure-all-tests)&quot; &quot;(t/run-all-testr)&quot; &quot;(t/run-all-test)&quot; &quot;(t/run-all-tests)&quot; &quot;(deftest a-test\n    (is (= 1 1)))&quot; &quot;(= '(5 4 2) '(5 4 2))&quot; &quot;(defrecord vec3 [x y z])&quot; &quot;(Vec3. 5 4 2)&quot; &quot;(ns quadtree.core)&quot; &quot;(quadtree.core/Vec3. 1 2 3)&quot; &quot;(def a (Vec3. 1 2 3))&quot; &quot;(Vec3. 1 2 3 )&quot; &quot;(defrecord Vec3 [x y z])&quot; &quot;(source Vec3)&quot; &quot;(use 'quadtree)&quot; &quot;(use 'quadtree.core)&quot; &quot;(Vec3. 5 6 7)&quot; &quot;lein repl&quot; &quot;(in-ns 'quadtree.core)&quot; &quot;(Vec3. 1 2 3)&quot; &quot;(= (Vec3. 1 2 3) (Vec3. 1 2 3))&quot; &quot;(def rand-dots (take num-obj (repeatedly #(dot. (rand-int 20) (rand-int 20) 5))))&quot; &quot;(defn rand-dots (take num-obj (repeatedly #(dot. (rand-int 20) (rand-int 20) 5))))&quot;], :remote []}}</component>
</project>